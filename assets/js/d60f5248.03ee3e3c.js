"use strict";(self.webpackChunkforms=self.webpackChunkforms||[]).push([[748],{5277:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>c});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=i.createContext({}),d=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},m=function(e){var n=d(e.components);return i.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},p=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=d(t),c=a,f=p["".concat(s,".").concat(c)]||p[c]||u[c]||o;return t?i.createElement(f,r(r({ref:n},m),{},{components:t})):i.createElement(f,r({ref:n},m))}));function c(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,r=new Array(o);r[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var d=2;d<o;d++)r[d]=t[d];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}p.displayName="MDXCreateElement"},1833:(e,n,t)=>{t.r(n),t.d(n,{frontMatter:()=>l,contentTitle:()=>s,metadata:()=>d,toc:()=>m,default:()=>p});var i=t(7462),a=t(3366),o=(t(7294),t(5277)),r=["components"],l={id:"form-builder",title:"\ud83d\udc77\u200d\u2642\ufe0f Form Builder"},s=void 0,d={unversionedId:"form-builder",id:"form-builder",isDocsHomePage:!1,title:"\ud83d\udc77\u200d\u2642\ufe0f Form Builder",description:"This utility package allows to dynamically build a form based on an input configuration and a dictionary of visual components.",source:"@site/docs/form-builder.md",sourceDirName:".",slug:"/form-builder",permalink:"/forms/docs/form-builder",editUrl:"https://github.com/BedrockStreaming/forms/edit/master/apps/docsite/docs/form-builder.md",version:"current",frontMatter:{id:"form-builder",title:"\ud83d\udc77\u200d\u2642\ufe0f Form Builder"},sidebar:"docs",previous:{title:"Install",permalink:"/forms/docs/install"},next:{title:"\ud83c\udf10 Form Redux",permalink:"/forms/docs/form-redux"}},m=[{value:"\ud83c\udfd7\ufe0f Install",id:"\ufe0f-install",children:[]},{value:"\ud83d\ude80 Usage",id:"-usage",children:[{value:"schema",id:"schema",children:[]},{value:"dictionary",id:"dictionary",children:[]},{value:"onSubmit",id:"onsubmit",children:[]},{value:"Single step forms",id:"single-step-forms",children:[]},{value:"Multi steps forms",id:"multi-steps-forms",children:[]},{value:"Navigating in a multi-step form",id:"navigating-in-a-multi-step-form",children:[]}]},{value:"Dictionary",id:"dictionary-1",children:[]},{value:"Validation",id:"validation",children:[]},{value:"Conditional Fields",id:"conditional-fields",children:[{value:"Using strings",id:"using-strings",children:[]},{value:"Using objects",id:"using-objects",children:[]}]}],u={toc:m};function p(e){var n=e.components,t=(0,a.Z)(e,r);return(0,o.kt)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This utility package allows to dynamically build a form based on an input configuration and a dictionary of visual components."),(0,o.kt)("h2",{id:"\ufe0f-install"},"\ud83c\udfd7\ufe0f Install"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @bedrockstreaming/form-builder\n")),(0,o.kt)("h2",{id:"-usage"},"\ud83d\ude80 Usage"),(0,o.kt)("p",null,"In order to create a form using this library, you simply need to import the ",(0,o.kt)("inlineCode",{parentName:"p"},"FormBuilder")," component, and instantiate it with the following props:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"schema"),": an object that will contain all the ",(0,o.kt)("strong",{parentName:"li"},"fields")," you want to display in your form, as well as the ",(0,o.kt)("strong",{parentName:"li"},"steps")," and the ",(0,o.kt)("strong",{parentName:"li"},"stepsById"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"dictionary"),": an object that will map all the fields of the schema with the React component you provide"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"onSubmit"),": the function you want to be called when the form is submitted")),(0,o.kt)("h3",{id:"schema"},"schema"),(0,o.kt)("p",null,"You should provide a ",(0,o.kt)("inlineCode",{parentName:"p"},"schema")," with the following structure:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import {\n  DeepMap,\n  DeepPartial,\n  Path,\n  PathValue,\n  UnionLike,\n  UnpackNestedValue,\n} from 'react-hook-form';\n\nexport interface FormSchema {\n  fields: {\n    [key: string]: {\n      id: string;\n      type: string;\n      meta?: {\n        [key: string]: unknown;\n      };\n      dependsOn?: Array<\n        | string\n        | {\n            key: string;\n            value?: string | number | null | string[] | number[];\n            callback: string;\n          }\n      >;\n      validation?: {\n        [key: string]: {\n          key: string;\n          type?: string;\n          message: string;\n          value?: unknown;\n        };\n      };\n      defaultValue?:\n        | UnpackNestedValue<PathValue<unknown, never>>\n        | string\n        | number\n        | string[]\n        | number[]\n        | Path<string>;\n    };\n  };\n  steps: {\n    [key: string]: {\n      id: string;\n      fieldsById: string[];\n      submit: {\n        label: string;\n      };\n      meta?: {\n        [key: string]: unknown;\n      };\n    };\n  };\n  stepsById: string[];\n}\n")),(0,o.kt)("p",null,"See this stripped down example below of a single input form"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"const schema = {\n  fields: {\n    'some-unique-identifier': {\n      id: 'some-unique-identifier',\n      type: 'text',\n    },\n    // ...\n  },\n  steps: {\n    'step-foo': {\n      id: 'step-foo',\n      fieldsById: ['some-unique-identifier'],\n      submit: {\n        label: 'foo', // submit button label\n      },\n    },\n  },\n  stepsById: ['step-foo'],\n};\n")),(0,o.kt)("h3",{id:"dictionary"},"dictionary"),(0,o.kt)("p",null,"You can then assign each type of field you have declared in your ",(0,o.kt)("inlineCode",{parentName:"p"},"schema")," by configuring the ",(0,o.kt)("inlineCode",{parentName:"p"},"dictionary")," prop:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"const dictionary = {\n  'some-unique-identifier': MyUniqueInput,\n  submit: MySubmitButton, // mandatory field\n  ...\n};\n")),(0,o.kt)("p",null,"Make sure the ",(0,o.kt)("inlineCode",{parentName:"p"},"dictionary")," keys corresponds to your fields types."),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Dictionary components (field components) can use some defined props,"),(0,o.kt)("p",null,"Here are all the base props that will be passed to every FormField."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export interface FormFieldProps {\n  id: string;\n  validation?: Validations;\n  errors?: ErrorOption;\n  setFieldValue?: SetFieldValue<string | number>;\n  triggerValidationField?: (value: Path<FieldValues>) => void;\n  propRef?: Ref;\n  disabled?: boolean;\n  label?: string;\n  onClick?: (event: any) => void;\n  isValidating?: boolean;\n}\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"You can leverage the ",(0,o.kt)("inlineCode",{parentName:"p"},"meta")," field property to pass more values to your field !"))),(0,o.kt)("h3",{id:"onsubmit"},"onSubmit"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"onSubmit")," callback is called when submitting the form, it follows ",(0,o.kt)("inlineCode",{parentName:"p"},"react-hook-form")," API."),(0,o.kt)("hr",null),(0,o.kt)("p",null,"By default, the form schema must include steps, even for a single one."),(0,o.kt)("h3",{id:"single-step-forms"},"Single step forms"),(0,o.kt)("p",null,"Example usage of a form that will display one text input."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { FormBuilder } from '@bedrockstreaming/form-builder';\n\nconst schema = {\n  fields: {\n    foo: {\n      id: 'foo',\n      type: 'text',\n      meta: {\n        label: 'Your name',\n      },\n    },\n  },\n  steps: {\n    'single-step-form': {\n      fieldsById: ['foo'],\n      id: 'single-step-form',\n      submit: {\n        label: 'submit',\n      },\n    },\n  },\n  stepsById: ['single-step-form'],\n};\n\nconst dictionary = {\n  text: ({ value, onChange, label }) => (\n    <input type=\"text\" value={value} onChange={onChange} placeholder={label} />\n  ),\n  submit: ({ label }) => <button type=\"submit\">{label}</button>,\n};\n\nconst FormWrapper = () => {\n  const onSubmit = (fieldValues) => {\n    return someAPICall(fieldValues).then(() => ...);\n  };\n\n  return (\n    <div>\n      <FormBuilder\n        schema={schema}\n        dictionary={dictionary}\n        onSubmit={onSubmit}\n      />\n    </div>\n  )\n}\n")),(0,o.kt)("h3",{id:"multi-steps-forms"},"Multi steps forms"),(0,o.kt)("p",null,"Example usage of a form that will display two steps."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { FormBuilder } from '@bedrockstreaming/form-builder';\n\nconst schema = {\n  fields: {\n    foo: {\n      id: 'foo',\n      type: 'text',\n      meta: {\n        label: 'some label',\n      },\n    },\n    bar: {\n      id: 'bar',\n      type: 'text',\n      meta: {\n        label: 'some label',\n      },\n    },\n  },\n  steps: {\n    'multi-step-form-1': {\n      fieldsById: ['foo'],\n      id: 'multi-step-form-1',\n      submit: {\n        label: 'next',\n      },\n    },\n    'multi-step-form-2': {\n      fieldsById: ['bar'],\n      id: 'multi-step-form-2',\n      submit: {\n        label: 'submit',\n      },\n    },\n  },\n  stepsById: ['multi-step-form-1', 'multi-step-form-2'],\n};\n\nconst dictionary = {\n  text: () => <input type=\"text\" placeholder=\"Your name\" />,\n};\n\nconst LAST_STEP_INDEX = schema.stepsById.length - 1;\n\nconst FormWrapper = () => {\n  const [stepIndex, setStepIndex] = useState(0);\n\n  const onSubmit = (fieldValues) => {\n    return someAPICall(fieldValues).then(() => ...)\n  };\n\n  return (\n    <div>\n      <FormBuilder\n        schema={schema}\n        dictionary={dictionary}\n        currentStepIndex={stepIndex}\n        onSubmit={onSubmit}\n        onNextStep={() => setStepIndex((oldIndex) => oldIndex === LAST_STEP_INDEX ? oldIndex : oldIndex + 1)}\n      />\n    </div>\n  );\n};\n")),(0,o.kt)("h3",{id:"navigating-in-a-multi-step-form"},"Navigating in a multi-step form"),(0,o.kt)("p",null,"This library doesn't provide steps state management by default. You can implement your own step management logic through the ",(0,o.kt)("inlineCode",{parentName:"p"},"onNextStep")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"onPreviousStep")," callbacks, there you can change the ",(0,o.kt)("inlineCode",{parentName:"p"},"currentStepIndex")," prop passed to the ",(0,o.kt)("inlineCode",{parentName:"p"},"FormBuilder")," as it is done in the previous example."),(0,o.kt)("p",null,"\ud83d\udca1 If you are using redux, we have a slice ready for you \ud83d\udc49 ",(0,o.kt)("a",{parentName:"p",href:"/forms/docs/form-redux"},"@bedrockstreaming/form-redux")),(0,o.kt)("h2",{id:"dictionary-1"},"Dictionary"),(0,o.kt)("h2",{id:"validation"},"Validation"),(0,o.kt)("p",null,"To do fields validation, we use the native implementation of ",(0,o.kt)("inlineCode",{parentName:"p"},"react-hooks-form"),". We leverage it through the validation field property."),(0,o.kt)("p",null,"When we want to perform a complex or very specific validation, even async, we need to:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Create an object containing the custom validation functions and pass it to the ",(0,o.kt)("inlineCode",{parentName:"li"},"extraValidation")," prop of the form-Builder"),(0,o.kt)("li",{parentName:"ul"},"Reference those ",(0,o.kt)("inlineCode",{parentName:"li"},"extraValidation")," functions in the schema config")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"const extraValidation = {\n  customValidationFunction1: (valueFromSchema) => (fieldValue) =>\n    doCustomValidationHere(valueFromSchema, fieldValue),\n};\n\nconst schema = {\n  fields: {\n    birthdate: {\n      // [...]\n      validation: {\n        customValidationFunction1: {\n          // <-- this is a custom validation\n          key: 'customValidationFunction1',\n          message: 'forms.register.birthdate.minAgeError',\n          value: 13,\n        },\n        required: {\n          // <-- this is a default validation (native to react-hook-form)\n          key: 'required',\n          message: 'forms.required.error',\n          value: true,\n        },\n      },\n    },\n  },\n};\n\nconst MyForm = () => (\n  <FormBuilder\n    schema={schema}\n    extraValidation={extraValidation}\n    dictionary={dictionary}\n    onSubmit={onSubmit}\n  />\n);\n\n// More info on the official react-hooks-form doc : https://react-hook-form.com/get-started#Applyvalidation\n")),(0,o.kt)("h2",{id:"conditional-fields"},"Conditional Fields"),(0,o.kt)("p",null,"You can add a ",(0,o.kt)("inlineCode",{parentName:"p"},"dependsOn")," entry in any of your field schema."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'export interface FormField {\n  // [...]\n  dependsOn?: Array<\n    | string // an other field id\n    | {\n        fieldId: string; // an other field id\n        key: string; // validation key\n        value?: string | number | null | string[] | number[]; // any serializable value, works the same way as validation\n        validate?: boolean; // perform an extra validation "manually"\n      }\n  >;\n}\n')),(0,o.kt)("h3",{id:"using-strings"},"Using strings"),(0,o.kt)("p",null,"When using a string, corresponding to a field id, the form builder will hide the field until those target field ids have been touched and validated."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"const schema = {\n  fields: {\n    someField: {\n      id: 'someField',\n      // ...\n    },\n    myConditionalField: {\n      id: 'myConditionalField',\n      dependsOn: [\n        {\n          key: 'someField',\n          callback: 'customValidationFunction1',\n          value: 13,\n        },\n      ],\n    },\n  },\n};\n")),(0,o.kt)("h3",{id:"using-objects"},"Using objects"),(0,o.kt)("p",null,"Otherwise, when using objects, you can either check for a specific validation error or leverage the ",(0,o.kt)("inlineCode",{parentName:"p"},"extraValidation")," functions to execute a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"const extraValidation = {\n  customValidationFunction1: (valueFromSchema) => (fieldValue) =>\n    doCustomValidationHere(valueFromSchema, fieldValue),\n  customValidationFunction2: (valueFromSchema) => (fieldValue) =>\n    valueFromSchema === fieldValue,\n};\n\nconst schema = {\n  fields: {\n    someField: {\n      id: 'someField',\n      validation: {\n        key: 'customValidationFunction2'\n        value: 'foo',\n        message: 'Some error message'\n      }\n      // ...\n    },\n    myConditionalField: {\n      id: 'myConditionalField',\n      dependsOn: [\n        {\n          fieldId: 'someField',\n          key: 'customValidationFunction1',\n          value: 13,\n          validate: true,\n        },\n        {\n          fieldId: 'someField',\n          key: 'customValidationFunction2',\n        },\n      ],\n    },\n  },\n};\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"When using boolean values (e.g. for checkbox), there is no other way than asserting the opposite of the default value to display a conditional field"))))}p.isMDXComponent=!0}}]);