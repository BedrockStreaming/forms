"use strict";(self.webpackChunkforms=self.webpackChunkforms||[]).push([[453],{5277:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),d=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=d(r),m=a,f=c["".concat(s,".").concat(m)]||c[m]||p[m]||o;return r?n.createElement(f,i(i({ref:t},u),{},{components:r})):n.createElement(f,i({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var d=2;d<o;d++)i[d]=r[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},2193:(e,t,r)=>{r.r(t),r.d(t,{frontMatter:()=>l,contentTitle:()=>s,metadata:()=>d,toc:()=>u,default:()=>c});var n=r(7462),a=r(3366),o=(r(7294),r(5277)),i=["components"],l={id:"form-validation-rule-list",title:"\ud83e\uddd1\u200d\u2696\ufe0f Form validation rule list"},s=void 0,d={unversionedId:"form-validation-rule-list",id:"form-validation-rule-list",isDocsHomePage:!1,title:"\ud83e\uddd1\u200d\u2696\ufe0f Form validation rule list",description:"This utility package allows to add a visual validation feedback to your users. It exposes a Higher Order Component adding some behavior to your existing inputs.",source:"@site/docs/form-validation-rule-list.md",sourceDirName:".",slug:"/form-validation-rule-list",permalink:"/forms/docs/form-validation-rule-list",editUrl:"https://github.com/BedrockStreaming/forms/edit/master/apps/docsite/docs/form-validation-rule-list.md",version:"current",frontMatter:{id:"form-validation-rule-list",title:"\ud83e\uddd1\u200d\u2696\ufe0f Form validation rule list"},sidebar:"docs",previous:{title:"\ud83c\udf10 Form Redux",permalink:"/forms/docs/form-redux"},next:{title:"\ud83c\udf10 Form Context",permalink:"/forms/docs/form-context"}},u=[{value:"\u2753 Why ?",id:"-why-",children:[]},{value:"\ud83c\udfd7\ufe0f Install",id:"\ufe0f-install",children:[]},{value:"\ud83d\ude80 Usage",id:"-usage",children:[]}],p={toc:u};function c(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This utility package allows to add a visual validation feedback to your users. It exposes a Higher Order Component adding some behavior to your existing inputs."),(0,o.kt)("h2",{id:"-why-"},"\u2753 Why ?"),(0,o.kt)("p",null,"By default, you can already validate your forms without adding any other library to the mix. It is also very trivial to display some error message since every dictionary component are receiving it from props. So why would you need something like ",(0,o.kt)("inlineCode",{parentName:"p"},"form validation rule list")," ? ",(0,o.kt)("strong",{parentName:"p"},"To give your users some hints about what is going wrong with their typing"),". It's too often that we apply several validations rules on a single input and many of those rules are complaining at the same time, then what to display ?"),(0,o.kt)("h2",{id:"\ufe0f-install"},"\ud83c\udfd7\ufe0f Install"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @bedrockstreaming/form-validation-rule-list\n")),(0,o.kt)("h2",{id:"-usage"},"\ud83d\ude80 Usage"),(0,o.kt)("p",null,"Extra validation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"const extraValidation = {\n  oneUpperCaseCharacter: () => (fieldValue) => /(?=.*[A-Z])/.test(fieldValue),\n  minLength: (minLengthValue) => (fieldValue) =>\n    fieldValue && fieldValue.length >= minLengthValue,\n};\n")),(0,o.kt)("p",null,"Schema"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"const schema = {\n  fields: {\n    password: {\n      id: 'password',\n      type: 'password',\n      validation: {\n        oneUpperCaseCharacter: {\n          key: 'oneUpperCaseCharacter',\n          message: 'You need at least one upper cased character',\n        },\n        minLength: {\n          key: 'minLength',\n          message: 'You password should be minimum 12 characters long',\n          value: 12,\n        },\n      },\n    },\n  },\n  steps: {...},\n  stepsById: [...]\n};\n")),(0,o.kt)("p",null,"Dictionary"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import {\n  getValidationRulesHints,\n  checkRules,\n  withValidationRuleList,\n} from '@bedrockstreaming/form-validation-rule-list';\n\nimport { PasswordTextField } from '@mylib/textfield';\n\nconst ValidatedPasswordTextField = withValidationRuleList(PasswordTextField);\n\nconst dictionary = {\n  password: ({ errors, validation, label, ...props }) => {\n    // These rules don't match react-hook-form's rule API, its proper to the form-validation-rule-list package\n    const rules = getValidationRulesHints({\n      errors,\n      validation,\n    });\n\n    const hasError = !!checkRules(props.value, rules).length;\n    const fieldError = errors && errors.type;\n    const isValid = !!(props.value && !hasError && !fieldError);\n\n    return (\n      <div>\n        <ValidatedPasswordTextField\n          label={label}\n          hasError={hasError}\n          valid={isValid}\n          {...props}\n          // specific props required by ValidationRuleList\n          rules={rules}\n          colors={validationColors}\n        />\n      </div>\n    );\n  },\n};\n")),(0,o.kt)("p",null,"\u26a0\ufe0f Beware, you can't use several ",(0,o.kt)("inlineCode",{parentName:"p"},"react-hook-form")," default rules as validation hints since the ",(0,o.kt)("inlineCode",{parentName:"p"},"errors")," object returned by the library can only contain one default rule error at a time."))}c.isMDXComponent=!0}}]);